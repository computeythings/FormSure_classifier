AWSTemplateFormatVersion: '2010-09-09'
Description: 'Document Region Classification Service with Continual Learning'

Parameters:
  EnvironmentName:
    Type: String
    Default: 'dev'
    Description: dev/staging/prod
    
  TablePrefix:
    Type: String
    Default: 'classifier'
    Description: Prefix for DynamoDB table names
    
  S3BucketName:
    Type: String
    Default: 'document-classifier-models'
    Description: S3 bucket name for model storage (must be globally unique)
    
  LambdaTimeout:
    Type: Number
    Default: 300
    Description: Lambda function timeout in seconds
    
  LambdaMemory:
    Type: Number
    Default: 1024
    Description: Lambda function memory in MB

Resources:
  # S3 Bucket for model storage
  ModelStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${S3BucketName}-${AWS::AccountId}-${AWS::Region}'
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 30

  # DynamoDB Tables
  PredictionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${TablePrefix}_predictions'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: image_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: image_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: timestamp-index
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Service
          Value: DocumentClassifier

  FeedbackTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${TablePrefix}_feedback'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: feedback_id
          AttributeType: S
        - AttributeName: image_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: feedback_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: image-id-index
          KeySchema:
            - AttributeName: image_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: timestamp-index
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Service
          Value: DocumentClassifier

  TrainingDataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${TablePrefix}_training_data'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: image_hash
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: image_hash
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: timestamp-index
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Service
          Value: DocumentClassifier

  # IAM Role for Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'DocumentClassifierLambdaRole-${EnvironmentName}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Scan
                  - dynamodb:Query
                Resource:
                  - !GetAtt PredictionsTable.Arn
                  - !GetAtt FeedbackTable.Arn
                  - !GetAtt TrainingDataTable.Arn
                  - !Sub '${PredictionsTable.Arn}/index/*'
                  - !Sub '${FeedbackTable.Arn}/index/*'
                  - !Sub '${TrainingDataTable.Arn}/index/*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub '${ModelStorageBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !GetAtt ModelStorageBucket.Arn

  # Lambda Layer for dependencies
  DependenciesLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub 'document-classifier-dependencies-${EnvironmentName}'
      Description: 'Python dependencies for document classifier'
      Content:
        S3Bucket: !Ref ModelStorageBucket
        S3Key: 'layers/dependencies.zip'
      CompatibleRuntimes:
        - python3.9
        - python3.10
        - python3.11

  # Lambda Function
  ClassifierFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'document-classifier-${EnvironmentName}'
      Runtime: python3.11
      Handler: classifier.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref ModelStorageBucket
        S3Key: 'code/classifier.zip'
      Layers:
        - !Ref DependenciesLayer
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemory
      Environment:
        Variables:
          AWS_REGION: !Ref AWS::Region
          TABLE_PREFIX: !Ref TablePrefix
          MODEL_S3_BUCKET: !Ref ModelStorageBucket
          MODEL_S3_KEY: 'models/classifier.joblib'
          SCALER_S3_KEY: 'models/scaler.joblib'
          ENVIRONMENT: !Ref EnvironmentName
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Service
          Value: DocumentClassifier

  # API Gateway
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'document-classifier-api-${EnvironmentName}'
      Description: 'Document Region Classification API'
      EndpointConfiguration:
        Types:
          - REGIONAL
      BinaryMediaTypes:
        - 'multipart/form-data'
        - 'image/*'

  # API Gateway Resources and Methods
  HealthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: health

  HealthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref HealthResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt ClassifierFunction.Arn

  StatsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: stats

  StatsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref StatsResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt ClassifierFunction.Arn

  ClassifyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: classify

  ClassifyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ClassifyResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt ClassifierFunction.Arn

  FeedbackResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: feedback

  FeedbackMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref FeedbackResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt ClassifierFunction.Arn

  RetrainResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestApi
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: retrain

  RetrainMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref RetrainResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt ClassifierFunction.Arn

  # CORS Options methods
  HealthOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref HealthResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  # Similar OPTIONS methods for other resources (abbreviated for space)
  ClassifyOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestApi
      ResourceId: !Ref ClassifyResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true

  # Lambda Permissions for API Gateway
  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ClassifierFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${RestApi}/*/GET/*'

  LambdaApiGatewayPermissionPost:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ClassifierFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${RestApi}/*/POST/*'

  LambdaApiGatewayPermissionOptions:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ClassifierFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${RestApi}/*/OPTIONS/*'

  # API Gateway Deployment
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - HealthMethod
      - StatsMethod
      - ClassifyMethod
      - FeedbackMethod
      - RetrainMethod
      - HealthOptionsMethod
      - ClassifyOptionsMethod
    Properties:
      RestApiId: !Ref RestApi
      StageName: !Ref EnvironmentName

  # CloudWatch Log Group
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/document-classifier-${EnvironmentName}'
      RetentionInDays: 14

Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'

  S3BucketName:
    Description: 'S3 bucket name for model storage'
    Value: !Ref ModelStorageBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3Bucket'

  LambdaFunctionArn:
    Description: 'Lambda function ARN'
    Value: !GetAtt ClassifierFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaArn'

  PredictionsTableName:
    Description: 'DynamoDB predictions table name'
    Value: !Ref PredictionsTable
    Export:
      Name: !Sub '${AWS::StackName}-PredictionsTable'

  FeedbackTableName:
    Description: 'DynamoDB feedback table name'
    Value: !Ref FeedbackTable
    Export:
      Name: !Sub '${AWS::StackName}-FeedbackTable'

  TrainingDataTableName:
    Description: 'DynamoDB training data table name'
    Value: !Ref TrainingDataTable
    Export:
      Name: !Sub '${AWS::StackName}-TrainingDataTable'