name: Deploy Document Classifier

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: 3.11

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8 black

      - name: Format check
        run: black --check classifier.py test_client.py

      - name: Lint
        run: flake8 classifier.py test_client.py --max-line-length=88

      - name: Run unit tests
        run: pytest tests/ -v || echo "No unit tests found"

      - name: Validate CloudFormation template
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Validate template
        run: aws cloudformation validate-template --template-body file://cloudformation.yaml

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy to staging
        run: |
          make deploy ENVIRONMENT=staging S3_BUCKET_BASE=${{ secrets.S3_BUCKET_BASE }}

      - name: Run integration tests
        run: |
          sleep 30  # Wait for deployment to stabilize
          make test ENVIRONMENT=staging

      - name: Notify deployment
        if: success()
        run: echo "‚úÖ Staging deployment successful"

      - name: Notify failure
        if: failure()
        run: echo "‚ùå Staging deployment failed"

  deploy-production:
    needs: [test, deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy to production
        run: |
          make deploy ENVIRONMENT=prod S3_BUCKET_BASE=${{ secrets.S3_BUCKET_BASE }}

      - name: Run smoke tests
        run: |
          sleep 30  # Wait for deployment to stabilize
          make test-health ENVIRONMENT=prod

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Notify success
        if: success()
        run: echo "üöÄ Production deployment successful!"

  cleanup-old-stacks:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Clean up old development stacks
        run: |
          # List and delete stacks older than 7 days with dev prefix
          aws cloudformation list-stacks \
            --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE \
            --query 'StackSummaries[?starts_with(StackName, `document-classifier-dev-`) && CreationTime <= `2024-01-01`].StackName' \
            --output text | xargs -r -n1 aws cloudformation delete-stack --stack-name